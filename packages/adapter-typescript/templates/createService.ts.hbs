type EventType<T, K> = { type: K } & T;

interface Services {
  {{#each services }}
  '{{camelcase this.name}}': {
    environments: {
      {{#each this.environmentsWithSteps}}
      '{{camelcase this.name}}': {
        from: {
          {{#each this.from}}
          '{{ camelcase this.env}}': {
            in:
            {{#each this.in}}
              | EventType<{{pascalcase ../../../name}}.{{this.event}}, "{{this.event}}">
            {{/each}}
            {{#unless this.in}}never;{{/unless}}
            out:
            {{#each this.out}}
              | EventType<{{pascalcase ../../../name}}.{{this.event}}, "{{this.event}}">
            {{/each}}
            {{#unless this.out}}never;{{/unless}}
          }
          {{/each}}
        }
        to: {
          {{#each this.to}}
          '{{ camelcase this.env}}': {
            in:
            {{#each this.in}}
              | EventType<{{pascalcase ../../../name}}.{{this.event}}, "{{this.event}}">
            {{/each}}
            {{#unless this.in}}never;{{/unless}}
            out:
            {{#each this.out}}
              | EventType<{{pascalcase ../../../name}}.{{this.event}}, "{{this.event}}">
            {{/each}}
            {{#unless this.out}}never;{{/unless}}
          }
          {{/each}}
        }
      }
      {{/each}}
    }
  }
  {{/each}}
}

interface EventConfig {
  in: { type: string };
  out: { type: string };
}

interface EnvironmentConfig {
  from: { [environment: string]: EventConfig };
  to: { [environment: string]: EventConfig };
}

type ImplementationFunction<
  TEventConfig extends EventConfig,
  TEnvironmentConfig extends EnvironmentConfig
> = (
  event: TEventConfig['in'],
  context: {
    environments: {
      [K in keyof TEnvironmentConfig['to']]: Sender<
        TEnvironmentConfig['to'][K]
      >;
    };
  },
  callback: (event: TEventConfig['out']) => void,
) => void | Promise<void>;

interface Sender<TEventConfig extends EventConfig> {
  promise: (event: TEventConfig['in']) => Promise<TEventConfig['out']>;
}

export const createActor = <
  IService extends keyof Services,
  IInitialEnvironment extends keyof Services[IService]["environments"],
  // @ts-ignore
  IFromEnvironment extends keyof Services[IService]["environments"][IInitialEnvironment]["from"]
>(
  service: IService,
  environment: IInitialEnvironment,
  {
    to,
  }: {
    from: {
      environment: IFromEnvironment;
      handler: ImplementationFunction<
        // @ts-ignore
        Services[IService]["environments"][IInitialEnvironment]["from"][IFromEnvironment],
        // @ts-ignore
        Services[IService]["environments"][IInitialEnvironment]
      >;
    };
    to?: {
      // @ts-ignore
      [SourceEnvKey in keyof Services[IService]["environments"][IInitialEnvironment]["to"]]?: ImplementationFunction<
        // @ts-ignore
        Services[IService]["environments"][IInitialEnvironment]["to"][SourceEnvKey],
        // @ts-ignore
        Services[IService]["environments"][SourceEnvKey]
      >;
    };
  },
  // @ts-ignore
): Sender<Services[IService]["environments"][IInitialEnvironment]["from"][IFromEnvironment]> => {
  return {} as any;
};