export interface SextantFeatures {
  {{#each features }}
  '{{this.name}}': {
    environments: {
      {{#each this.environmentsWithSteps}}
      '{{this.name}}': {
        from: {
          {{#each this.from}}
          '{{this.env}}': {
            in:
            {{#each this.in}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.in}}never;{{/unless}}
            out:
            {{#each this.out}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.out}}never;{{/unless}}
          }
          {{/each}}
        }
        to: {
          {{#each this.to}}
          '{{this.env}}': {
            in:
            {{#each this.in}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.in}}never;{{/unless}}
            out:
            {{#each this.out}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.out}}never;{{/unless}}
          }
          {{/each}}
        }
      }
      {{/each}}
    }
  }
  {{/each}}
}

export interface SextantEnvironments {
  {{#each environments}}
  '{{this.name}}': {
    from: {
      {{#each this.from}}
      '{{this.env}}': {
        in:
        {{#each this.in}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        {{#unless this.in}}never;{{/unless}}
        out:
        {{#each this.out}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        {{#unless this.out}}never;{{/unless}}
      }
      {{/each}}
    }
    to: {
      {{#each this.to}}
      '{{this.env}}': {
        in:
        {{#each this.in}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        out:
        {{#each this.out}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        {{#unless this.out}}never;{{/unless}}
      }
      {{/each}}
    }
  };
  {{/each}}
}

export interface EventConfig {
  in: { type: string };
  out: { type: string };
}

type SextantPromise<TEventConfig extends EventConfig> = (
  event: TEventConfig["in"],
) => Promise<TEventConfig["out"]> | TEventConfig["out"];

/**
 * A handler type built by Sextant.
 *
 * Usage:
 *
 * ```ts
 * const handler: SextantHandler<
 *   'featureName',
 *   'fromThisEnvironment',
 *   'toThisEnvironment',
 * > = () => {};
 * ```
 */
export type SextantHandler<
  IFeature extends keyof SextantFeatures,
  IFrom extends keyof SextantFeatures[IFeature]["environments"] = any,
  // @ts-ignore
  ITarget extends keyof SextantFeatures[IFeature]["environments"][IFrom]["from"] = any
> = SextantPromise<
  // @ts-ignore
  SextantFeatures[IFeature]["environments"][IFrom]["to"][ITarget]
>;

/**
 * An event type built by Sextant.
 *
 * Usage:
 *
 * ```ts
 * const event: SextantEvent<'featureName', 'fromThisEnvironment', 'toThisEnvironment'>;
 * const specificEvent: SextantEvent<
 *   'featureName',
 *   'fromThisEnvironment',
 *   'toThisEnvironment',
 *   'SPECIFIC_EVENT_TYPE'
 * >;
 * ```
 */
export type SextantEvent<
  IFeature extends keyof SextantFeatures,
  IFrom extends keyof SextantFeatures[IFeature]["environments"] = any,
  // @ts-ignore
  ITarget extends keyof SextantFeatures[IFeature]["environments"][IFrom]["from"] = any,
  // @ts-ignore
  IType extends SextantFeatures[IFeature]["environments"][IFrom]["to"][ITarget]["in"]["type"] = any
> = Extract<
  // @ts-ignore
  SextantFeatures[IFeature]["environments"][IFrom]["to"][ITarget]["in"],
  { type: IType }
>;

/**
 * Fetch all events from an environment to another environment,
 * across features
 */
export type SextantAllEventsToEnvironment<
  IFrom extends keyof SextantEnvironments,
  ITo extends keyof SextantEnvironments[IFrom]['from'] = any,
  // @ts-ignore
  IType extends SextantEnvironments[IFrom]['from'][ITo]['out']['type'] = any
> = Extract<
  // @ts-ignore
  SextantEnvironments[IFrom]['from'][ITo]['out'],
  { type: IType }
>;
